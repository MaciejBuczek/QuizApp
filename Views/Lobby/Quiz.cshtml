@model string

<style>
    .timer {
        position: relative;
        height: 150px;
        width: 150px;
    }

    .timer-circle {
        fill: none;
        stroke: none;
    }

    .timer-path-elapsed {
        stroke-width: 7px;
        stroke: grey;
    }

    .timer-label {
        position: absolute;
        width: 150px;
        height: 150px;
        top: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }

    .timer-path-remaining {
        stroke-width: 7px;
        stroke-linecap: round;
        transform: rotate(90deg);
        transform-origin: center;
        transition: 1s linear all;
        stroke: #158cba;
    }

    .timer-svg {
        transform: scaleX(-1);
    }
</style>

<div class="row">
    <div class="col-10">
        <h1 class="text-primary" id="title">Quiz Title</h1>
        <h2>Temp Question</h2>
    </div>
    <div class="col-2">
        <div class="timer">
            <svg class="timer-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                <g class="timer-circle">
                    <circle class="timer-path-elapsed" cx="50" cy="50" r="45" />
                    <path id="timer-path-remaining"
                          stroke-dasharray="283"
                          class="timer-path-remaining"
                          d="
                              M 50, 50
                              m -45, 0
                              a 45,45 0 1,0 90,0
                              a 45,45 0 1,0 -90,0
                            "></path>
                </g>
            </svg>
            <span id="timer-label" class="timer-label">
                <!-- Remaining time label -->
            </span>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-10">
        <div>
            Temp Answers
        </div>
    </div>
    <div class="col-2 mt-3">
        <h1 class="text-primary font-weight-bold">Scoreboard</h1>
        <div id="scoreboard">

        </div>
    </div>
</div>

@section Scripts{
    <script src="~/js/timer.js"></script>
    <script>
        const lobbyCode = "@Model";
        const redirectURL = '@Url.Action("Index","Home")';

        startTimer();

        let connection = new signalR.HubConnectionBuilder()
            .configureLogging(signalR.LogLevel.Trace)
            .withUrl("/hubs/quiz")
            .build();

        function initializeQuestion(question) {
        }

        function connectToQuiz() {
            connection.invoke("ConnectToQuiz", lobbyCode);
        }
        function startSuccess() {
            connectToLobby();
        }
        function startFail() {
            generateSwalRedirect('error', 'Quiz Error', 'Could not connect to quiz');
        }

        function generateSwalRedirect(icon, title, text) {
            Swal.fire({
                icon: icon,
                title: title,
                text: text,
            }).then(() => {
                window.location.replace(redirectURL)
            });
        }

        function updateScoreboard(usersScores) {
            let scoreboard = document.getElementById("scoreboard");
            scoreboard.innerHTML = '';
            for (let i = 0; i < usersScores.length; i++) {
                scoreboard.innerHTML += generateUserLabel(`${usersScores[i].username} ${usersScores[i].score}`);
            }
        }

        function startSuccess() {
            console.log("connected");
            connectToQuiz();
        }

        function startFail() {
            console.log("connection failed");
            generateSwalRedirect('error', 'Connection Error', 'Could not load the quiz data');
        }

        connection.start().then(startSuccess, startFail);

        connection.on("initalizeQuiz", (quizInfo) => {
            if(quizInfo == null || quizInfo == "")
                generateSwalRedirect('error', 'Connection Error', 'Error ocured while loading quiz data');

                document.getElementById("title").innerText = quizInfo.quizTitle;
                updateScoreboard(quizInfo.usersScores);
        });

        connection.on("updateScoreboard", (usersScores) => {
            updateScoreboard(usersScores);
        });

        connection.on("beginQuiz", () => {
            alert("start")
        });

    </script>
}
