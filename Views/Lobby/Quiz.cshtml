@model string

<style>
    .timer{
        position:relative;
        height:150px;
        width:150px;
    }
    .timer-circle{
        fill:none;
        stroke:none;
    }
    .timer-path-elapsed{
        stroke-width:7px;
        stroke:grey;
    }
    .timer-label{
        position: absolute;
        width:150px;
        height:150px;
        top:0;
        display:flex;
        align-items:center;
        justify-content:center;
        font-size:20px;
    }
    .timer-path-remaining {
        stroke-width:7px;
        stroke-linecap:round;
        transform:rotate(90deg);
        transform-origin:center;
        transition:1s linear all;
        stroke:#158cba;
    }
    .timer-svg {
        transform:scaleX(-1);
    }
</style>

<div class="row">
    <div class="col-10">
        <h1 class="text-primary" id="title">Quiz Title</h1>
        <h2>Temp Question</h2>
    </div>
    <div class="col-2">
        <div class="timer">
            <svg class="timer-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                <g class="timer-circle">
                    <circle class="timer-path-elapsed" cx="50" cy="50" r="45" />
                    <path id="timer-path-remaining"
                          stroke-dasharray="283"
                          class="timer-path-remaining"
                          d="
                              M 50, 50
                              m -45, 0
                              a 45,45 0 1,0 90,0
                              a 45,45 0 1,0 -90,0
                            "></path>
                </g>
            </svg>
            <span id="timer-label" class="timer-label">
            </span>
        </div>
    </div>
</div>
<div class="row mt-2">
    <div class="col-10">
        <div class="h4">
            Temp Questions
        </div>
    </div>
    <div class="col-2">
        <h2 >Scoreboard</h2>
        <div id="scoreboard">

        </div>
    </div>
</div>

@section Scripts{ 
    <script>
        const lobbyCode = "@Model";
        const redirectURL = '@Url.Action("Index","Home")';
        let connection = new signalR.HubConnectionBuilder()
            .configureLogging(signalR.LogLevel.Trace)
            .withUrl("/hubs/lobby")
            .build();

        const fullDashArray = 283;

        function getFormattedTime(time) {
            let minutes = Math.floor(time / 60);
            let seconds = time % 60;

            if (seconds < 10)
                seconds = `0${seconds}`;

            return `${minutes}:${seconds}`;
        }

        function startTimer() {
            let totalTime = 10;
            let timePassed = 0;
            let timeLeft = totalTime;

            document.getElementById("timer-label").innerText = getFormattedTime(timeLeft);

            timerInterval = setInterval(() => {
                timePassed++;
                timeLeft = totalTime - timePassed;
                document.getElementById("timer-label").innerText = getFormattedTime(timeLeft);
                setDasharray(timeLeft, totalTime);
                if (timeLeft == 0)
                    clearInterval(timerInterval);
            }, 1000);
        }

        function getTimePercent(timeLeft, totalTime) {
            let percentRaw = timeLeft / totalTime;
            return percentRaw - (1 / totalTime) * (1 - percentRaw);
        }

        function setDasharray(timeLeft, totalTime) {
            let value = `${(getTimePercent(timeLeft, totalTime) * fullDashArray).toFixed(0)} ${fullDashArray}`;
            document.getElementById("timer-path-remaining").setAttribute("stroke-dasharray", value);
        }

        function initalizeQuiz(quizInfo) {
            if (quizInfo == null || quizInfo == "")
                generateSwalRedirect('error', 'Quiz Error', 'Error ocured while loading quiz data');
            document.getElementById("title").innerText = quizInfo.QuizTitle;
            //document.getElementById("")
        }

        function initializeQuestion(question) {

        }

        function connectToQuiz() {
            connection.invoke("ConnectToQuiz", lobbyCode);
        }

        startTimer();

        connection.start().then(startSuccess, startFail);

        function startSuccess() {
            connectToLobby();
        }

        function startFail() {
            generateSwalRedirect('error', 'Quiz Error', 'Could not connect to quiz');
        }

        function generateSwalRedirect(icon, title, text) {
            Swal.fire({
                icon: icon,
                title: title,
                text: text,
            }).then(() => {
                window.location.replace(redirectURL)
            });
        }

        function updateScoreboard(scores) {
            let scoreboard = document.getElementById("scoreboard");
            for (let i = 0; i < scores.length; i++) {

            }
        }
    </script>
}

